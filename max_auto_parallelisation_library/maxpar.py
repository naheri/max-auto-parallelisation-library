class Task:
    def __init__(self, name="", reads=None, writes=None, run=None):
        self.name = name
        self.reads = reads if reads is not None else []
        self.writes = writes if writes is not None else []
        self.run = run

X = None
Y = None
Z = None

def runT1():
    global X  
    X = 1

def runT2():
    global Y  
    Y = 2

def runTsomme():
    global X, Y, Z  
    Z = X + Y




class TaskSystem:
    def __init__(self, tasks, precedence):
        """
        Initialise le syst√®me de t√¢ches et effectue les validations.
        """
        self._validate_tasks(tasks, precedence)

        # Stocker les t√¢ches sous forme de dictionnaire {nom: t√¢che}
        self.tasks = {task.name: task for task in tasks}
        self.precedence = precedence.copy()

    def _validate_tasks(self, tasks, precedence):
        """
        V√©rifie :
        - Pas de noms de t√¢ches en double
        - Toutes les d√©pendances existent
        - Absence de cycle dans le graphe de pr√©c√©dence
        """
        temp = set()


        # 1Ô∏è‚É£ V√©rifier les doublons de t√¢ches
        for task in tasks:
            if task.name in temp:
                print(f"üö® ERREUR : La t√¢che '{task.name}' est dupliqu√©e !")
                raise ValueError(f"üö® Erreur : La t√¢che '{task.name}' est doubl√©e !!!")
            temp.add(task.name)

        # 2Ô∏è‚É£ V√©rifier les d√©pendances inexistantes
        for task_name, dependencies in precedence.items():
            for dep in dependencies:
                if dep not in temp:
                    raise ValueError(f"üö® Erreur : La t√¢che '{dep}' n'existe pas dans la liste des t√¢ches !!!")

    

        
